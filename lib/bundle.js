// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.BlackList = (function() {
    function BlackList() {}

    BlackList._list = [
      {
        keyword: "SQL_Connect",
        level: "Medium"
      }, {
        keyword: "set_user_flags",
        level: "High"
      }, {
        keyword: "download",
        level: "High"
      }, {
        keyword: "httpdl",
        level: "High"
      }, {
        keyword: "client_cmd",
        level: "Medium"
      }, {
        keyword: "amx_sql_host",
        level: "High"
      }, {
        keyword: "amx_sql_pass",
        level: "High"
      }, {
        keyword: "rcon_password",
        level: "High"
      }
    ];

    BlackList.check = function(keyword) {
      var d, i, j, len, ref;
      ref = BlackList._list;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        d = ref[i];
        if (d.keyword === keyword) {
          return d.level;
        }
      }
      return "Unknown";
    };

    return BlackList;

  })();

  this.AmxPlugin = (function() {
    AmxPlugin.prototype._parseHeader = function() {
      this.header.size = this.data.readUnsignedInt();
      this.header.magic = this.data.readUnsignedShort();
      this.header.file_version = this.data.readUnsignedByte();
      this.header.amx_version = this.data.readUnsignedByte();
      this.header.flags = this.data.readUnsignedShort();
      this.header.defsize = this.data.readUnsignedShort();
      this.header.cod = this.data.readUnsignedInt();
      this.header.dat = this.data.readUnsignedInt();
      this.header.hea = this.data.readUnsignedInt();
      this.header.stp = this.data.readUnsignedInt();
      this.header.cip = this.data.readUnsignedInt();
      this.header.publics = this.data.readUnsignedInt();
      this.header.natives = this.data.readUnsignedInt();
      this.header.libraries = this.data.readUnsignedInt();
      this.header.pubvars = this.data.readUnsignedInt();
      this.header.tags = this.data.readUnsignedInt();
      this.header.nametable = this.data.readUnsignedInt();
      return this.header.overlays = this.data.readUnsignedInt();
    };

    AmxPlugin._parseTable = function(name, data, start, end, cellSize) {
      var count, d, i, j, k, len, list, record, ref, ref1;
      list = {};
      list.array = [];
      list.name = name;
      list.dangerCount = {};
      list.dangerCount.high = 0;
      list.dangerCount.medium = 0;
      list.dangerCount.unknown = 0;
      count = (end - start) / cellSize;
      data.index = start;
      for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        record = {
          address: data.readUnsignedInt(),
          nameofs: data.readUnsignedInt()
        };
        list.array.push(record);
      }
      ref1 = list.array;
      for (i = k = 0, len = ref1.length; k < len; i = ++k) {
        d = ref1[i];
        data.index = d.nameofs;
        name = data.readCString();
        d.name = name;
        d.danger = BlackList.check(name);
        switch (d.danger) {
          case "high":
            list.dangerCount.high++;
            break;
          case "medium":
            list.dangerCount.medium++;
            break;
          case "unknown":
            list.dangerCount.unknown++;
        }
      }
      return list;
    };

    function AmxPlugin(data) {
      this.data = new ByteBuffer(data, ByteBuffer.LITTLE_ENDIAN);
      this.hash = md5(data);
      this.header = {};
      this._parseHeader();
      this.table = {
        publics: AmxPlugin._parseTable("Publics function", this.data, this.header.publics, this.header.natives, this.header.defsize),
        natives: AmxPlugin._parseTable("Natives", this.data, this.header.natives, this.header.libraries, this.header.defsize),
        libraries: AmxPlugin._parseTable("Libraries", this.data, this.header.libraries, this.header.pubvars, this.header.defsize),
        pubvars: AmxPlugin._parseTable("Pubvars", this.data, this.header.pubvars, this.header.tags, this.header.defsize),
        tags: AmxPlugin._parseTable("Tags", this.data, this.header.tags, this.header.nametable, this.header.defsize)
      };
    }

    return AmxPlugin;

  })();

  this.AmxxPlugin = (function() {
    AmxxPlugin.prototype._parseHeader = function() {
      this.header.magic = this.data.readUnsignedInt();
      this.header.version = this.data.readUnsignedShort();
      this.header.sections = this.data.readUnsignedByte();
      this.header.cellsize = this.data.readUnsignedByte();
      this.header.disksize = this.data.readUnsignedInt();
      this.header.imagesize = this.data.readUnsignedInt();
      this.header.memsize = this.data.readUnsignedInt();
      return this.header.offs = this.data.readUnsignedInt();
    };

    AmxxPlugin.prototype._parseVersion32 = function() {
      var uncompresseData;
      this.data.index = this.header.offs;
      this.rawVersion32 = this.data.read(this.header.disksize);
      uncompresseData = pako.inflate(this.rawVersion32.buffer);
      return this.version32 = new AmxPlugin(uncompresseData);
    };

    AmxxPlugin.prototype._parseVersion64 = function() {
      var uncompresseData;
      this.data.index = this.header.offs + this.header.disksize;
      this.rawVersion64 = this.data.read();
      uncompresseData = pako.inflate(this.rawVersion64.buffer);
      return this.version64 = new AmxPlugin(uncompresseData);
    };

    function AmxxPlugin(data) {
      this.data = new ByteBuffer(data, ByteBuffer.LITTLE_ENDIAN);
      this.header = {};
      this.rawVersion32 = {};
      this.rawVersion64 = {};
      this.version32 = {};
      this.version64 = {};
      this.hash = md5(data);
      this._parseHeader();
      this._parseVersion32();
    }

    return AmxxPlugin;

  })();

  this.AmxView = (function() {
    function AmxView() {}

    AmxView.renderMenu = function(name, id) {
      return $.get("./template/menu_position.mst", function(template) {
        return $("#menu").append(Handlebars.compile(template)({
          name: name,
          id: id
        }));
      }, 'text');
    };

    AmxView.renderContent = function(name, id, plugin) {
      return $.get("./template/amx_content.mst", function(template) {
        return $("#content").append(Handlebars.compile(template)({
          name: name,
          id: id,
          plugin: plugin
        }));
      }, 'text');
    };

    AmxView.renderPlugin = function(name, id, plugin) {
      AmxView.renderMenu(name, id);
      return AmxView.renderContent(name, id, plugin);
    };

    return AmxView;

  })();

  this.PluginManager = (function() {
    function PluginManager() {}

    PluginManager._plugins = {
      array: [],
      count: 0
    };

    PluginManager._generateRandomStr = function() {
      return (Math.random() * 1e32).toString(36);
    };

    PluginManager._addAmxxPlugin = function(plugin) {
      var count, data;
      count = ++PluginManager._plugins.count;
      data = {
        name: $("#plugin_name").val(),
        id: "amxx-" + count,
        plugin: plugin
      };
      console.log(data);
      $.get("./template/amxx/menu_position.mst", function(template) {
        var rendered;
        rendered = Mustache.render(template, data);
        return $('#menu').append(rendered);
      }, 'text');
      $.get("./template/amxx/content.mst", function(template) {
        var rendered;
        rendered = Mustache.render(template, data);
        return $('#content').append(rendered);
      }, 'text');
      return $.AdminLTE.layout.fix();
    };

    PluginManager._addAmxPlugin = function(data) {};

    PluginManager.addPlugin = function(plugin, type) {
      var count, data, view;
      count = ++PluginManager._plugins.count;
      data = {
        name: $("#plugin_name").val(),
        id: "amxx-" + count,
        plugin: new AmxxPlugin(plugin)
      };
      view = {};
      switch (type) {
        case "amxx":
          return AmxxView.renderPlugin(data.name, data.id, data.plugin);
        case "amx":
          return view = new AmxView(data.name, data.id, data.plugin);
        default:
          throw error;
      }
    };

    return PluginManager;

  })();

  this.AmxxView = (function() {
    function AmxxView() {}

    AmxxView.renderMenu = function(name, id) {
      return $.get("./template/amxx_menu.mst", function(template) {
        return $("#menu").append(Handlebars.compile(template)({
          name: name,
          id: id
        }));
      }, 'text');
    };

    AmxxView.renderContent = function(name, id, plugin) {
      var amxVer32;
      amxVer32 = {
        name: name + " - Version 32",
        id: id + "-ver32",
        plugin: plugin.version32
      };
      $.get("./template/amxx_content.mst", function(template) {
        return $("#content").append(Handlebars.compile(template)({
          name: name,
          id: id,
          plugin: plugin
        }));
      }, 'text');
      return $.get("./template/amx_content.mst", function(template) {
        return $("#content").append(Handlebars.compile(template)(amxVer32));
      }, 'text');
    };

    AmxxView.renderPlugin = function(name, id, plugin) {
      AmxxView.renderMenu(name, id);
      return AmxxView.renderContent(name, id, plugin);
    };

    return AmxxView;

  })();

  this.Form = (function() {
    Form.prototype.parse = function() {
      var d, i, j, len, ref, text;
      text = "<" + this.tag + " class='" + this["class"] + "'>";
      ref = this.inside;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        d = ref[i];
        text += d.parse();
      }
      return text += "</" + this.tag + ">";
    };

    Form.prototype.add = function(form) {
      this.inside.push(form);
      return this;
    };

    function Form() {
      this.tag = "";
      this["class"] = "";
      this.inside = [];
    }

    return Form;

  })();

  this.MenuPosition = (function() {
    MenuPosition.prototype.parse = function() {
      return "<li> <a data-toggle='tab' href='#" + this.id + "'> " + this.name + " </a> </li>";
    };

    function MenuPosition(name, id) {
      this.name = name;
      this.id = id;
    }

    return MenuPosition;

  })();

  this.Site = (function(superClass) {
    extend(Site, superClass);

    Site.prototype.parse = function() {
      var d, i, j, len, ref, text;
      text = "";
      ref = this.inside;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        d = ref[i];
        text += d.parse();
      }
      return "<div id='" + this.id + "' class='tab-pane fade'> <div class='content-wrapper'> <section class='content-header'> <h1>" + this.name + "</h1> </section> <section class='content'> " + text + " </section> </div> </div>";
    };

    function Site(name, id) {
      Site.__super__.constructor.apply(this, arguments);
      this.name = name;
      this.id = id;
    }

    return Site;

  })(Form);

  this.Text = (function() {
    Text.prototype.parse = function() {
      return this.content;
    };

    function Text(content) {
      this.content = content;
    }

    return Text;

  })();

  this.Div = (function(superClass) {
    extend(Div, superClass);

    function Div() {
      Div.__super__.constructor.apply(this, arguments);
      this.tag = "div";
    }

    return Div;

  })(Form);

  this.Table = (function(superClass) {
    extend(Table, superClass);

    function Table() {
      Table.__super__.constructor.apply(this, arguments);
      this.tag = "table";
      this["class"] = "table table-bordered";
    }

    return Table;

  })(Form);

  this.TH = (function(superClass) {
    extend(TH, superClass);

    function TH() {
      TH.__super__.constructor.apply(this, arguments);
      this.tag = "th";
    }

    return TH;

  })(Form);

  this.TD = (function(superClass) {
    extend(TD, superClass);

    function TD() {
      TD.__super__.constructor.apply(this, arguments);
      this.tag = "td";
    }

    return TD;

  })(Form);

  this.TR = (function(superClass) {
    extend(TR, superClass);

    function TR() {
      TR.__super__.constructor.apply(this, arguments);
      this.tag = "tr";
    }

    return TR;

  })(Form);

  this.Box = (function(superClass) {
    extend(Box, superClass);

    function Box() {
      Box.__super__.constructor.apply(this, arguments);
      this["class"] = "box";
    }

    return Box;

  })(Div);

  this.BoxHeader = (function(superClass) {
    extend(BoxHeader, superClass);

    function BoxHeader() {
      BoxHeader.__super__.constructor.apply(this, arguments);
      this["class"] = "box-header with-border";
    }

    return BoxHeader;

  })(Div);

  this.BoxContent = (function(superClass) {
    extend(BoxContent, superClass);

    function BoxContent() {
      BoxContent.__super__.constructor.apply(this, arguments);
      this["class"] = "box-body";
    }

    return BoxContent;

  })(Div);

}).call(this);
